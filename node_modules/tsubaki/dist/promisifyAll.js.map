{"version":3,"file":"promisifyAll.js","sourceRoot":"/","sources":["promisifyAll.ts"],"names":[],"mappings":";;;AAAA,2CAAoC;AAEpC;;;;;GAKG;AACH,MAAM,YAAY,GAAG,CAAC,GAAQ,EAAE,MAAM,GAAG,OAAO,EAAE,EAAE;IACnD,4DAA4D;IAC5D,MAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;IAC1C,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;QAC/D,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,UAAU;YAAE,SAAS;QAC7C,GAAG,CAAC,GAAG,GAAG,GAAG,MAAM,EAAE,CAAC,GAAG,mBAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;KAC7C;IACD,OAAO,GAAG,CAAC;AACZ,CAAC,CAAC;AAEO,oCAAY;AACrB,kBAAe,YAAY,CAAC","sourcesContent":["import promisify from './promisify';\n\n/**\n * Promisifies an object with functions\n * @param {Object} obj The object to promisify\n * @param {string} [suffix='Async'] Suffix to append to the promisified function\n * @returns {Object} The updated object with promisified functions\n */\nconst promisifyAll = (obj: any, suffix = 'Async') => {\n\t// Appearently some people like to promisify class instances\n\tconst newObj = Object.getPrototypeOf(obj);\n\tfor (const key of Object.keys(obj).concat(Object.keys(newObj))) {\n\t\tif (typeof obj[key] !== 'function') continue;\n\t\tobj[`${key}${suffix}`] = promisify(obj[key]);\n\t}\n\treturn obj;\n};\n\nexport { promisifyAll };\nexport default promisifyAll;\n"]}